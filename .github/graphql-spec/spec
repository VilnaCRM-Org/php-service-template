type HealthCheck implements Node {
  id: ID!
}

"""Cursor connection for HealthCheck."""
type HealthCheckCursorConnection {
  edges: [HealthCheckEdge]
  pageInfo: HealthCheckPageInfo!
  totalCount: Int!
}

"""Edge of HealthCheck."""
type HealthCheckEdge {
  node: HealthCheck
  cursor: String!
}

"""Information about the current page."""
type HealthCheckPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Mutation {
  """Updates a HealthCheck."""
  updateHealthCheck(input: updateHealthCheckInput!): updateHealthCheckPayload

  """Deletes a HealthCheck."""
  deleteHealthCheck(input: deleteHealthCheckInput!): deleteHealthCheckPayload

  """Creates a HealthCheck."""
  createHealthCheck(input: createHealthCheckInput!): createHealthCheckPayload
}

"""A node, according to the Relay specification."""
interface Node {
  """The id of this node."""
  id: ID!
}

type Query {
  node(id: ID!): Node
  healthChecks(
    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
  ): HealthCheckCursorConnection
  healthCheck(id: ID!): HealthCheck
}

"""Creates a HealthCheck."""
input createHealthCheckInput {
  clientMutationId: String
}

"""Creates a HealthCheck."""
type createHealthCheckPayload {
  healthCheck: HealthCheck
  clientMutationId: String
}

"""Deletes a HealthCheck."""
input deleteHealthCheckInput {
  id: ID!
  clientMutationId: String
}

"""Deletes a HealthCheck."""
type deleteHealthCheckPayload {
  healthCheck: HealthCheck
  clientMutationId: String
}

"""Updates a HealthCheck."""
input updateHealthCheckInput {
  id: ID!
  clientMutationId: String
}

"""Updates a HealthCheck."""
type updateHealthCheckPayload {
  healthCheck: HealthCheck
  clientMutationId: String
}
